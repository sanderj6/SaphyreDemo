@inherits Saphyre_InputBase<string>

<div class="multiselect-dropdown">
	<label class="multiselect-label">@LabelText</label>

	<div class="selected-items" @onclick="ToggleDropdown">
		@if (selectedItems.Count == Data.Count)
		{
			<div class="all-selected">All Selected (@Data.Count/@Data.Count)</div>
		}
		else if (selectedItems.Count > 3)
		{
			@for (int i = 0; i < 2; i++)
			{
				<div class="selected-tag">
					@selectedItems[i].Name <span class="remove-tag" @onclick:stopPropagation="true" @onclick="() => RemoveItem(selectedItems[i])">&times;</span>
				</div>
			}
			<div class="additional-items">(+@(selectedItems.Count - 2))</div>
		}
		else if(selectedItems.Any())
		{
			@foreach (var item in selectedItems)
			{
				<div class="selected-tag">
					@item.Name <span class="remove-tag" @onclick:stopPropagation="true" @onclick="() => RemoveItem(item)">&times;</span>
				</div>
			}
		}
		else
		{
			<div class="placeholderText">@Placeholder</div>
		}
		
		<button type="button" class="button-dropdown" @onclick:stopPropagation="true"  @onclick="ToggleDropdown">
			<i class="fas fa-chevron-down"></i>
		</button>
	</div>

	@if (IsDropdownOpen)
	{
		<div class="dropdown-content">
			<div class="dropdown-header">
				<input @bind-value="IsAllItemsChecked" @bind-value:event="onchange" type="checkbox" id="selectAll" />
				<div class="header-title">Item</div>
				<div class="header-title">Sub-item</div>
			</div>
			<div class="dropdown-grid">
				@foreach (var item in Data)
				{
					var isChecked = @selectedItems.Contains(item);
					var CheckedCSS = isChecked ? "saphyre-checked" : "";
						
					<div class="dropdown-row">
						<input type="checkbox" id="@item.Name" checked="@selectedItems.Contains(item)" @onchange="() => CheckboxChanged(item)">
						<label class="@CheckedCSS" for="@item.Name">@item.Name</label>
						<label class="sub-item">@item.SecondaryName</label>
					</div>
				}
				@if (IsGridEditable)
				{
					@if (IsEditMode)
					{
						<div class="edit-row">
							<input class="editCheckItem" type="checkbox" id="newItem" disabled>
							<input @bind-value="@Title" class="editTextItem" type="text" placeholder="New Item" />
							<div class="d-flex justify-content-between">
								<input @bind-value="@SubTitle" class="editSubItem" type="text" placeholder="New Sub-item" />
								<div class="">
									<button @onclick="AddItem" disabled="@IsSubmitDisabled" type="button" class="editModeSubmitBtn @EditBtnValidCSS">
										<i class="fas fa-arrow-right"></i>
									</button>
									<button @onclick="ToggleEditMode" type="button" class="editModeCancelBtn">
										<i class="fas fa-times"></i>
									</button>
								</div>
							</div>
						</div>
					}
					else
					{
						<div class="dropdown-row">
							<div></div>
							@if (!Data.Any())
							{
								<div class="dropdownNoResults">No results found</div>
							}
							<div @onclick="ToggleEditMode" type="button" class="dropdownAddNew">+ Add New</div>
						</div>
					}
				}
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	public List<DropDownItem> Data { get; set; } = new();
	
	[Parameter]
	public bool IsGridEditable { get; set; }

	public bool IsEditMode { get; set; }
	public bool IsDropdownOpen = false;

	List<DropDownItem> selectedItems = new();

	private bool _isAllItemsChecked;
	private bool IsAllItemsChecked
	{
		get => _isAllItemsChecked;
		set
		{
			if (_isAllItemsChecked != value)
			{
				_isAllItemsChecked = value;
				OnAllItemsChecked();
			}
		}
	}
	private string Title { get; set; }
	private string SubTitle { get; set; }

	private bool IsSubmitDisabled => string.IsNullOrEmpty(Title) || string.IsNullOrEmpty(SubTitle);
	private string EditBtnValidCSS => IsSubmitDisabled ? "" : "valid";

	private void ToggleDropdown()
	{
		IsDropdownOpen = !IsDropdownOpen;
		StateHasChanged();
	}

	private void ToggleEditMode()
	{
		IsEditMode = !IsEditMode;
		StateHasChanged();
	}

	private void CheckboxChanged(DropDownItem item)
	{
		if (selectedItems.Contains(item))
		{
			selectedItems.Remove(item);
		}
		else
		{
			selectedItems.Add(item);
		}
	}

	private void AddItem()
	{
		Data.Add(new DropDownItem()
		{
			Name = Title,
			SecondaryName = SubTitle
		});

		Title = string.Empty;
		SubTitle = string.Empty;

		ToggleEditMode();
	}

	private void RemoveItem(DropDownItem item)
	{
		selectedItems.Remove(item);
	}

	private void OnAllItemsChecked()
	{
		if (IsAllItemsChecked)
		{
			selectedItems = new List<DropDownItem>(Data);
		}
		else
		{
			selectedItems = new();
		}
	}

}
