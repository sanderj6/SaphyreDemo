@inherits Saphyre_InputBase<string>
@typeparam TItem
@using System.Linq.Expressions
@using System.Reflection
@using MudBlazor
@using FluentValidation
@using SaphyreDemo.Helpers

<div class="saphyre_selectbox position-absolute" title="@Value">
	<MudSelect @ref="@field"
			   T="string"
	           Value="Value"
			   ValueChanged="OnInputValueChanged"
			   For="@FieldExpression"
			   Class="@DisabledCSS()"
			   Disabled="@IsDisabled"
			   ReadOnly="@IsReadOnly"
			   Required="@IsValidation"
			   Label="@LabelText"
			   Placeholder="@Placeholder"
			   MultiSelection="@IsMultiSelect"
			   Format="@Format"
			   Adornment="Adornment.End"
			   AdornmentIcon="@Icons.Material.Filled.ExpandMore">

		@foreach (var item in Data)
		{
			<MudSelectItem Value="@Value_Primary(item)">
				@if (ItemTemplate == null)
				{
					@Value_Primary(item)
				}
				else
				{
					@ItemTemplate(item)
				}
			</MudSelectItem>
		}


	</MudSelect>

</div>

@code {
	[Parameter]
	public List<TItem> Data { get; set; } = new();
	
	private IEnumerable<string> SelectedItems { get; set; } = Enumerable.Empty<string>();

	[Parameter]
	public RenderFragment<TItem> ItemTemplate { get; set; }

	[Parameter]
	public Func<TItem, string> Value_Primary { get; set; } = item => item.ToString();

	[Parameter]
	public Func<TItem, string> Value_Secondary { get; set; }

	[Parameter]
	public bool IsMultiSelect { get; set; }

	private bool IsClearable => IsMultiSelect;
	
	public MudSelect<string> field { get; set; }
	public Adornment GetAdornment() => field?.Error == true ? Adornment.End : Adornment.None;
	public string GetAdornmentIcon() => field?.Error == true ? @Icons.Material.Filled.ExpandMore : @Icons.Material.Rounded.Error;
	public string DisabledCSS() => field?.Disabled == true ? $"{CSSClass} DisabledClass" : @CSSClass;
}

