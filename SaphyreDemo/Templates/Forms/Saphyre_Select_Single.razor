@inherits Saphyre_InputBase<string>
@typeparam TItem
@using System.Linq.Expressions
@using System.Reflection
@using MudBlazor
@using FluentValidation
@using SaphyreDemo.Helpers

<div class="saphyre_selectbox position-absolute">
	<MudSelect Value="InputValue"
			   ValueChanged="OnInputValueChanged"
			   T="string"
			   Class="@CSSClass"
			   Disabled="@IsDisabled"
			   ReadOnly="@IsReadOnly"
			   Label="@LabelText"
			   Placeholder=""
			   MultiSelection="@IsMultiSelect"
			   Format="@Format"
			   AdornmentIcon="@Icons.Material.Filled.ExpandMore">

		@foreach (var item in Data)
		{
			<MudSelectItem Value="@Value_Primary(item)">
				@if (ItemTemplate == null)
				{
					@Value_Primary(item)
				}
				else
				{
					@ItemTemplate(item)
				}
			</MudSelectItem>
		}


	</MudSelect>

	@if (IsValidation)
	{
		<ValidationMessage For="@FieldExpression" />
	}

</div>

@code {
	[Parameter]
	public List<TItem> Data { get; set; } = new();

	private IEnumerable<string> SelectedItems { get; set; } = Enumerable.Empty<string>();

	[Parameter]
	public RenderFragment<TItem> ItemTemplate { get; set; }

	[Parameter]
	public Func<TItem, string> Value_Primary { get; set; } = item => item.ToString();

	[Parameter]
	public Func<TItem, string> Value_Secondary { get; set; }

	[Parameter]
	public bool IsComboBox { get; set; } = false;

	[Parameter]
	public bool IsMultiSelect { get; set; }

	[Parameter]
	public bool IsGridMode { get; set; }

	[Parameter]
	public string Header_Primary { get; set; } = "Title";

	[Parameter]
	public string Header_Secondary { get; set; } = "Sub-title";

	private bool IsClearable => IsMultiSelect;
	private bool IsAllSelected { get; set; }
	private bool IsDisplayItems { get; set; }
	private bool IsFirstOpen { get; set; } = true;

	FluentValueValidator<List<string>> selectBoxValidator = new FluentValueValidator<List<string>>(x =>
	x.Must(list => list != null && list.Count() > 0).WithMessage("The list must contain at least one object."));

	private void OnValueSelected(IEnumerable<string> newItems)
	{
		// Check if any item is an empty string or null and filter them out
		if (newItems.Any(x => string.IsNullOrEmpty(x)))
		{
			CheckAllValues();
		}
		else
		{
			SelectedItems = newItems;
		}
		StateHasChanged();
	}

	private void CheckAllValues()
	{
		if (IsAllSelected)
		{
			SelectedItems = Enumerable.Empty<string>();
		}
		else
		{
			// Set Selected Items to ALL
			// Exclude faux header
			var selected = Data.Select(item => Value_Primary(item));
			// SelectedItems = Data.Select(item => Value_Primary(item))
			// 									.Where(value => !string.IsNullOrEmpty(value));

			SelectedItems = selected.Concat(new[] { string.Empty });
		}
	}

	private void HandleDropdownOpened()
	{
		IsDisplayItems = true;
		StateHasChanged();
	}

	private void HandleDropdownClosed(bool isCleared)
	{
		if (isCleared)
		{
			SelectedItems = Enumerable.Empty<string>();
		}
		else
		{
			SelectedItems = Data.Select(item => Value_Primary(item))
													.Where(value => !string.IsNullOrEmpty(value));
		}

		IsDisplayItems = !isCleared && SelectedItems.Any();

		StateHasChanged();
	}
}

