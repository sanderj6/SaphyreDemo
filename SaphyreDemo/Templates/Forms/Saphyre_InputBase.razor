@typeparam TItem
@using System.Linq.Expressions
@using SaphyreDemo.Helpers.Extensions
@using System.Reflection

@code {
    
    [Parameter] public TItem Value { get; set; }
    
    [Parameter] public string CSSClass { get; set; }
    [Parameter] public string Format { get; set; }
    [Parameter] public string Placeholder { get; set; }
    
    [Parameter] public bool IsValidation { get; set; } = true;
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    [Parameter] public Expression<Func<TItem>> FieldExpression { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }
    
    private string labelText;
    
    [Parameter]
    public string LabelText
    {
        get
        {
            if (IsValidation)
            {
                if (string.IsNullOrEmpty(labelText) && FieldExpression != null)
                {
                    var memberExpression = FieldExpression.Body as MemberExpression;
                    var propName = memberExpression?.Member.Name;
                    labelText = StringExtensions.FromCamelCase(propName);
                }
    
                return labelText;
            }
            else
            {
                return labelText;
            }
        }
        set => labelText = value;
    }
    
    public async Task OnInputValueChanged(TItem newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }
    
    public int TextLength
    {
        get
        {
            if (Value == null) return 0;
    
            if (Value is string strVal)
            {
                return strVal.Length;
            }
    
            return Value.ToString().Length;
        }
    }
}
