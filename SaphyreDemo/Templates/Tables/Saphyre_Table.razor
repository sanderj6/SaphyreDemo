@typeparam TItem
@using MudBlazor
@using SaphyreDemo.Templates.Forms
@implements IDisposable

<div class="form-group d-flex flex-md-row flex-column p-0">
	<div class="col-12 mb-2">
		<MudTextField 
					  Placeholder="Search..."
					  Value="@searchString"
					  T="string"
					  ValueChanged="((string newVal) => OnSearchChanged(newVal))"
					  Adornment="Adornment.End"
					  AdornmentColor="Color.Dark"
					  AdornmentIcon="@Icons.Material.Filled.Search"
					  Immediate="true"
					  Class="searchBox" />
	</div>
</div>

<MudTable @ref="_table"
		  Items="@pagedItems"
		  ServerData="@LoadServerData"
		  Virtualize="true"
		  RowsPerPage="5"
		  SelectOnRowClick="true"
		  T="TItem"
		  OnRowClick="OnRowClicked"
		  Filter="@((item) => TableFilterFunc(item, searchString))"
		  Hover="true">
	<HeaderContent>
		@HeaderTemplate
	</HeaderContent>
	<RowTemplate>
		@RowTemplate(context)
	</RowTemplate>
	<PagerContent>
		<MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" LastIcon="true" ShowFirstButton="true" Class="pa-4" />
	</PagerContent>
</MudTable>

@code {
	[Parameter] public Func<string, Task<IEnumerable<TItem>>> DataService { get; set; }
	[Parameter] public RenderFragment HeaderTemplate { get; set; }
	[Parameter] public RenderFragment<TItem> RowTemplate { get; set; }
	[Parameter] public Action<TItem> RowClickCallback { get; set; }
	
	private IEnumerable<TItem> pagedItems;
	private string searchString = "";
	private MudTable<TItem> _table;
	private Timer _searchTimer;

	private bool _TableFilterFunc(TItem element) => TableFilterFunc(element, searchString);

	private bool TableFilterFunc(TItem element, string searchString)
	{
		var item = element as OrderDescription;

		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (item.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
			// if ($"{item.Number} {item.Position} {item.Molar}".Contains(searchString))
		//     return true;
		return false;
	}

	private async Task<TableData<TItem>> LoadServerData(TableState state)
	{
		var allItems = await DataService(searchString);
		var totalItems = allItems.Count();
		var itemsPerPage = state.PageSize;
		var currentPage = state.Page;

		// Calculate the range of items to display on the current page
		var pagedItems = allItems.Skip(currentPage * itemsPerPage).Take(itemsPerPage);

		return new TableData<TItem>
			{
				Items = pagedItems,
				TotalItems = totalItems
			};
	}

	private void OnSearchChanged(string newVal)
	{
		searchString = newVal;
		_table.ReloadServerData();

		// _searchTimer?.Dispose();
		// _searchTimer = new Timer(_ => InvokeAsync(() => _table.ReloadServerData()), null, 500, Timeout.Infinite);
	}

	public void RefreshTableData()
	{
		_table.ReloadServerData();
	}
	
	private void OnRowClicked(TableRowClickEventArgs<TItem> args)
	{
		var item = args.Item;
		RowClickCallback?.Invoke(item);
	}

	private void PageChanged(int i)
	{
		_table.NavigateTo(i - 1);
	}

	public void Dispose()
	{
		_searchTimer?.Dispose();
	}
}
