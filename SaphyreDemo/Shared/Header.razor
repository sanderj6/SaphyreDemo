@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <img src="@LogoPath" alt="Logo" title="@SelectedCompany" style="height: 40px;">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item dropdown">
                    <select class="form-select" @onchange="ChangeCompany">
                        <option value="saphyre">Saphyre</option>
                        <option value="bnp">BNP Paribas</option>
                        <option value="chase">Chase</option>
                    </select>
                </li>
            </ul>
            <form class="d-flex">
                <button class="btn btn-outline-secondary" type="button" @onclick="NavigateToStyles">
                    Styles
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="ToggleTheme">
                    <i class="@(IsLightMode ? "fas fa-sun" : "fas fa-moon")"></i>
                </button>
            </form>
        </div>
    </div>
</nav>

@code {
    [CascadingParameter]
    public string ColorScheme { get; set; }

    [Parameter]
    public Action<string, bool> Callback { get; set; }

    private string SelectedCompany { get; set; } = "saphyre";
    private string SelectedLightMode => IsLightMode ? "light" : "dark";
    private bool IsLightMode { get; set; } = true;

    private string LogoPath => $"images/logo_{SelectedCompany}_{SelectedLightMode}.svg";

    // private async Task UpdateTheme()
    // {
    //     var themeClass = $"{SelectedCompany}-{(IsLightMode ? "light" : "dark")}";
    //     await JSRuntime.InvokeVoidAsync("setTheme", themeClass);
    // }

    private void ChangeCompany(ChangeEventArgs e)
    {
        SelectedCompany = e.Value.ToString();
        ChangeScheme();
    }

    private void ToggleTheme()
    {
        IsLightMode = !IsLightMode;
        ChangeScheme();
    }

    private void ChangeScheme()
    {
        Callback?.Invoke(SelectedCompany, IsLightMode);
    }

    private void NavigateToStyles()
    {
        NavManager.NavigateTo("styles", true);
    }
}

