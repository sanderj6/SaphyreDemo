@page "/"
@using MudBlazor
@using SaphyreDemo.Pages.Admin.User.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@inherits PageBase<UserManagement>
@inject ModalService modalService
@inject ToastService toastService
@inject IOrderService orderService
@inject DummyOrderService dummyOrderService

<PageTitle>User Management</PageTitle>

<div class="container mt-3">

    <div class="form-container-header">
        <div class="d-flex justify-content-between">
            <h2>User Management</h2>

            <button class="btn btn-primary mb-2" @onclick="AddOrder">Add Order</button>
        </div>
    </div>

    <div class="form-container">
        <EditForm EditContext="@editContext"
                  OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div>

                <div class="form-group d-flex flex-md-row flex-column">
                    <div class="col-md-4 col-12">
                        <Saphyre_Textbox FieldExpression="@(() => Model.FreeText)" CSSClass="form-input" />
                    </div>

                    <div class="col-md-4 col-12">
                        <Saphyre_Textbox FieldExpression="@(() => Model.FreeText)" CSSClass="form-input" />
                    </div>

                    <div class="col-md-4 col-12">
                        <Saphyre_Date FieldExpression="@(() => Model.Date)" CSSClass="form-input" />
                    </div>
                </div>

                <div class="form-group d-flex flex-md-row flex-column">
                    <div class="col-md-4 col-12">
                        <Saphyre_Select FieldExpression="(() => Model.Currency)"
                                        TItem="Currency"
                                        Data="currencyList.Currencies"
                                        ValueSelector="@((Currency c) => c.Name)"
                                        CSSClass="form-input" />
                    </div>

                    <div class="col-md-4 col-12">
                        <Saphyre_Textbox FieldExpression="@(() => Model.FreeText)" CSSClass="form-input" />
                    </div>

                    <div class="col-md-4 col-12">
                        <Saphyre_Select FieldExpression="(() => Model.Currency)"
                                        TItem="Currency"
                                        Data="currencyList.Currencies"
                                        ValueSelector="@((Currency c) => c.Name)"
                                        CSSClass="form-input" />
                    </div>
                </div>

                <div class="form-group d-flex flex-md-row flex-column">
                    <div class="col-md-4 col-12">
                        <Saphyre_Textbox FieldExpression="@(() => Model.FreeText)" CSSClass="form-input" />
                    </div>

                    <div class="col-md-4 col-12">
                        <Saphyre_Select FieldExpression="(() => Model.Currency)"
                                        TItem="Currency"
                                        Data="currencyList.Currencies"
                                        ValueSelector="@((Currency c) => c.Name)"
                                        CSSClass="form-input" />
                    </div>

                </div>

                <div class="form-group d-flex justify-content-between pt-4 gap-3">
                    <button @onclick="ShowModal" class="btn btn-primary form-button">MODAL</button>
                    <button @onclick="ShowToast" class="btn btn-primary form-button">TOAST</button>
                    <button type="submit" class="btn btn-primary form-button">
                        Submit Order
                    </button>
                </div>

            </div>

        </EditForm>
    </div>

    <div class="form-container">
        <Saphyre_Table TItem="OrderDescription"
                       DataService="@GetFilteredData">

            <HeaderTemplate>
                <MudTh>Description</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>TaxPercentage</MudTh>
                <MudTh>Date</MudTh>
            </HeaderTemplate>

            <RowTemplate>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount</MudTd>
                    <MudTd DataLabel="TaxPercentage">@context.TaxPercentage</MudTd>
                    <MudTd DataLabel="Date">@context.Date</MudTd>
                </RowTemplate>

            </Saphyre_Table>
        </div>

    </div>

    <style>
        .form-container {
            max-width: 800px;
            margin: 5px auto;
            padding: 20px;
            background-color: #f9f9f9;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .form-container-header {
            max-width: 800px;
            margin: 0px auto;
        }

        .form-group {
            background-color: #f9f9f9;
        }

        .form-input {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .form-button {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 4px;
            background-color: #0056b3;
            color: white;
            font-size: 16px;
            cursor: pointer;
        }

            .form-button:hover {
                background-color: #004494;
            }
    </style>


    @code {
    private YourModel Model = new YourModel();

    private UserModel UserModel { get; set; } = new();
    private EditContext editContext { get; set; }

    CurrencyList currencyList = new CurrencyList();

    // Dummy list of users
    private List<UserModel> Users = new List<UserModel>();
    public IEnumerable<OrderDescription> Orders { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        editContext = new EditContext(Model);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Orders = dummyOrderService.GetAllOrders();
        }
    }

    private RenderFragment HeaderContent => builder =>
    {
        builder.OpenComponent<MudTh>(0);
        builder.AddContent(1, "Order ID");
        builder.CloseComponent();
        // Add more headers as needed
    };

    private RenderFragment<OrderDescription> RowContent => context => builder =>
    {
        builder.OpenComponent<MudTd>(0);
        builder.AddContent(1, context.Description);
        builder.CloseComponent();
        // Add more cells as needed
    };

    public async Task HandleSubmit()
    {

    }

    public void AddOrder()
    {

    }

    private async Task<IEnumerable<OrderDescription>> GetFilteredData(string searchString)
    {
        // Assume GetFilteredOrdersAsync handles the filtering based on searchString
        return await dummyOrderService.GetFilteredOrders(searchString);
    }

    private async Task ShowModal()
    {
        modalService.Show<UserModel, bool>("Success!", "modal-md", typeof(UserSuccessModal), UserModel, ModalService.ModalOperation.Add, result =>
        {
            if (result)
            {
            }

            modalService.Close();
        });
    }

    private async Task ShowToast()
    {
        toastService.ShowMessage("This is a toast");
    }

}