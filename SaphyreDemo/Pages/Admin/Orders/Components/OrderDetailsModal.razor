@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums
@using FluentValidation
@inherits PageBase<OrderDetailsModal>
@inject IOrderService orderService
@inject ToastService toastService

<div class="container">
	<Saphyre_Form Model="@Model"
				  OnSubmit="((OrderDescription item) => { HandleSubmit(item); })"
				  OnClose="HandleCancel">
		<FormContent>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Textbox @bind-Value="@Model.Description" FieldExpression="(() => Model.Description)"/>
				</div>

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single @bind-Value="@Model.ShippingType.Name"
										   FieldExpression="(() => Model.ShippingType.Name)"
										   Data="shippingOptions"
										   LabelText="Shipping Type"
										   Value_Primary="((DropDownItem item) => item.Name)" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column align-items-center">

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single Value="@Model.Currency.Name"
										   FieldExpression="(() => Model.Currency.Name)"
										   ValueChanged="((string newVal) => SetCurrencyType(newVal))"
										   Data="currencyList.Currencies"
										   LabelText="Currency"
										   Value_Primary="((Currency item) => item.Name)" />
				</div>


				<div class="col-md-3 col-12">
					<Saphyre_Numberbox @bind-Value="Model.Amount"
									   FieldExpression="@(() => Model.Amount)"
									   T="decimal" />
				</div>

				<div class="col-md-3 col-12">
					<Saphyre_Select_Single @bind-Value="@Model.Currency.ISOCode"
					                       FieldExpression="(() => Model.Currency.ISOCode)"
					                       LabelText="ISO Code"
										   Data="currencyList.Currencies"
										   IsDisabled="true"
										   IsValidation="false"
										   Value_Primary="((Currency item) => item.ISOCode)" />
				</div>

			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-12 col-12">
					<Saphyre_Select_Grid @bind-Value="Model.ProductType.Name" FieldExpression="(() => Model.ProductType.Name)" Data="productTypes" LabelText="Product Type" IsGridEditable="true" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-4 col-12">
					<Saphyre_Numberbox Value="@Model.TaxPercentage" FieldExpression="@(() => Model.TaxPercentage)"
									   ValueChanged="((decimal newVal) => Model.TaxPercentage = newVal)" T="decimal" IsPercentage="true" />
				</div>
				<div class="col-md-4 col-12">
					<Saphyre_Date Value="Model.Date" LabelText="Date" />
				</div>
				
				<div class="col-md-4 col-12 align-self-center text-end">
					<button type="button" class="btn btn-saphyre inactive"><i class="fas fa-arrow-right"></i></button>
					<button type="button" @onclick="HandleTestBtnClick" class="btn btn-saphyre active"><i class="fas fa-arrow-right"></i></button>
                </div>
			</div>

		</FormContent>
	</Saphyre_Form>
</div>

@code {
	[Parameter]
	public OrderDescription Model { get; set; }

	[Parameter]
	public Action<OrderDescription, bool> Callback { get; set; }

	private EditContext editContext { get; set; }

	private CurrencyList currencyList = new();

	// Dummy Shipping Options
	private List<DropDownItem> shippingOptions = new()
	{
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Expedited"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Overnight"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Priority"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Standard"
		}
	};
	
	// Dummy Product Types
	private List<DropDownItem> productTypes = new()
	{
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Electronics",
			SecondaryName = "TVs, Computers, Audio"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Clothing",
			SecondaryName = "Men's, Women's, Kids'"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Furniture",
			SecondaryName = "Living Room, Bedroom, Outdoor"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Toys",
			SecondaryName = "Action Figures, Learning Toys, Puzzles"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Books",
			SecondaryName = "Fiction, Non-Fiction, Children's"
		}
	};

	protected override void OnInitialized()
	{
		Model ??= new();
		editContext = new EditContext(Model);
	}

	private void HandleSubmit(OrderDescription item)
	{
		try
		{
			// fake API call
			//var isSuccess = await orderService.UpdateOrderAsync(Model);
			Callback?.Invoke(Model, true);
		}
		catch (Exception ex)
		{
			Logger.LogError($"Issue submitting order: {ex}");
			Callback?.Invoke(Model,false);
		}
	}

	public async Task HandleCancel()
	{
		Callback?.Invoke(Model,false);
	}

	public void SetShippingType(string item)
	{
		Model.ShippingType = shippingOptions.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}

	public void SetCurrencyType(string item)
	{
		Model.Currency = currencyList.Currencies.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}

	private void HandleTestBtnClick()
	{
		toastService.ShowMessage($"Stop clicking that.");
	}
}
