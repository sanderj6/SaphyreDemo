@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums
@using FluentValidation
@inherits PageBase<OrderDetailsModal>
@inject IOrderService orderService
@inject DummyOrderService dummyOrderService

<div class="container">
	<Saphyre_Form Model="@Model"
				  OnSubmit="((OrderDescription item) => { HandleSubmit(item); })"
				  OnClose="HandleCancel">
		<FormContent>

			<div class="saphyre-form d-flex flex-sm-row flex-column flex-wrap">
				<div class="col-md-6 col-sm-6 col-12">
					<Saphyre_Textbox @bind-Value="@Model.Description" FieldExpression="(() => Model.Description)"/>
				</div>

				<div class="col-md-6 col-sm-6 col-12">
					<Saphyre_Select_Single Value="@Model.ShippingType.Name"
					                       ValueChanged="((string newVal) => SetShippingType(newVal))"
					                       FieldExpression="(() => Model.ShippingType.Name)"
					                       Data="dummyOrderService.shippingOptions"
					                       LabelText="Shipping Type"
					                       Placeholder="Please select a value..."
					                       Value_Primary="((DropDownItem item) => item.Name)"/>
				</div>
			</div>

			<div class="saphyre-form d-flex flex-sm-row flex-column align-items-center flex-wrap">

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single Value="@Model.Currency.Name"
					                       FieldExpression="(() => Model.Currency.Name)"
					                       ValueChanged="((string newVal) => SetCurrencyType(newVal))"
					                       Data="currencyList.Currencies"
					                       LabelText="Currency"
					                       Placeholder="Please select a currency..."
					                       Value_Primary="((Currency item) => item.Name)"/>
				</div>


				<div class="col-md-3 col-12">
					<Saphyre_Numberbox @bind-Value="Model.Amount"
					                   FieldExpression="@(() => Model.Amount)"
					                   T="decimal"/>
				</div>

				<div class="col-md-3 col-sm-6 col-12">
					<Saphyre_Select_Single @bind-Value="@Model.Currency.ISOCode"
					                       FieldExpression="(() => Model.Currency.ISOCode)"
					                       LabelText="ISO Code"
					                       Data="currencyList.Currencies"
					                       IsDisabled="true"
					                       IsValidation="false"
					                       Value_Primary="((Currency item) => item.ISOCode)"/>
				</div>

			</div>

			<div class="saphyre-form d-flex flex-sm-row flex-column flex-wrap">
				<div class="col-md-12 col-12">
					<Saphyre_Select_Grid OrderProducts="Model.Products" OnSelectboxChanged="((List<DropDownItem> items) => {Model.Products = new List<DropDownItem>(items); })" Data="dummyOrderService.productTypes" LabelText="Product Type" Placeholder="Please select a product..." IsGridEditable="true" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-sm-row flex-column flex-wrap mb-4">
				<div class="col-md-4 col-sm-6 col-12">
					<Saphyre_Numberbox Value="@Model.TaxPercentage" FieldExpression="@(() => Model.TaxPercentage)"
									   ValueChanged="((decimal newVal) => Model.TaxPercentage = newVal)" T="decimal" IsPercentage="true" />
				</div>
				<div class="col-md-4 col-sm-6 col-12">
					<Saphyre_Date Value="Model.Date" ValueChanged="SetDateValue" LabelText="Date" />
				</div>
			</div>

		</FormContent>
	</Saphyre_Form>
</div>

@code {
	[Parameter]
	public OrderDescription Model { get; set; }

	[Parameter]
	public Action<OrderDescription, bool> Callback { get; set; }

	private EditContext editContext { get; set; }

	private CurrencyList currencyList = new();
	
	protected override void OnInitialized()
	{
		Model ??= new();
		editContext = new EditContext(Model);
	}

	private void HandleSubmit(OrderDescription item)
	{
		try
		{
			// fake API call
			//var isSuccess = await orderService.UpdateOrderAsync(Model);
			Callback?.Invoke(Model, true);
		}
		catch (Exception ex)
		{
			Logger.LogError($"Issue submitting order: {ex}");
			Callback?.Invoke(Model,false);
		}
	}

	public async Task HandleCancel()
	{
		Callback?.Invoke(Model,false);
	}

	public void SetShippingType(string item)
	{
		Model.ShippingType = dummyOrderService.shippingOptions.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}

	public void SetCurrencyType(string item)
	{
		Model.Currency = currencyList.Currencies.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}

	public async Task SetDateValue(DateTime? newDate)
	{
		if (newDate.HasValue)
		{
			Model.Date = newDate.Value;
		}
	}

}
