@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums
@using FluentValidation
@inject IValidator<OrderDescription> validator

<div class="container">
	<EditForm EditContext="@editContext"
			  OnSubmit="HandleSubmit">
		<DataAnnotationsValidator />

		<div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Textbox FieldExpression="@(() => Model.Description)" />
				</div>

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single FieldExpression="(() => Model.ShippingType.Name)"
										   Data="shippingOptions"
										   Value_Primary="((DropDownItem item) => item.Name)" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column align-items-center">
				<div class="col-md-6 col-12">
					<Saphyre_Numberbox FieldExpression="@(() => Model.Amount)" />
				</div>

				<div class="col-md-3 col-12">
					<Saphyre_Select_Single FieldExpression="(() => Model.Currency.ISOCode)"
										   Data="currencyList.Currencies"
										   Value_Primary="((Currency item) => item.ISOCode)" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Select_Grid IsGridEditable="true" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Numberbox FieldExpression="@(() => Model.TaxPercentage)" IsPercentage="true" />
				</div>

				<div class="col-md-6 col-12">
					<Saphyre_Date FieldExpression="@(() => Model.Date)" />
				</div>
			</div>

			<div class="saphyre-form d-flex justify-content-end pt-4 gap-3">
				<button @onclick="HandleCancel" type="button" class="btn btn-secondary modalButton">
					Cancel
				</button>
				<button type="submit" class="btn btn-primary modalButton">
					Submit Order
				</button>
			</div>

		</div>

	</EditForm>
</div>

@code {
	[Parameter]
	public OrderDescription Model { get; set; } = new();

	[Parameter]
	public Action<bool> Callback { get; set; }

	private EditContext editContext { get; set; }
	private ValidationMessageStore messageStore;

	private CurrencyList currencyList = new();
	private List<DropDownItem> shippingOptions = new()
																																								{
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Expedited"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Overnight"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Priority"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Standard"
		}
																																								};

	protected override void OnInitialized()
	{
		editContext = new EditContext(Model);
		messageStore = new ValidationMessageStore(editContext);

		editContext.OnValidationRequested += (s, e) => ValidateModel();
		editContext.OnFieldChanged += (s, e) => ValidateField(e.FieldIdentifier);
	}

	private async Task HandleSubmit()
	{
		ValidateModel();
		if (!editContext.GetValidationMessages().Any())
		{
		// Proceed with the form submission logic
		}
	}

	private void ValidateModel()
	{
		var validationResult = validator.Validate(Model);
		messageStore.Clear();
		foreach (var error in validationResult.Errors)
		{
			messageStore.Add(editContext.Field(error.PropertyName), error.ErrorMessage);
		}
		editContext.NotifyValidationStateChanged();
	}

	private void ValidateField(FieldIdentifier fieldIdentifier)
	{
		var validationResult = validator.Validate(Model, options => options.IncludeProperties(fieldIdentifier.FieldName));
		messageStore.Clear(fieldIdentifier);
		foreach (var error in validationResult.Errors.Where(e => e.PropertyName == fieldIdentifier.FieldName))
		{
			messageStore.Add(fieldIdentifier, error.ErrorMessage);
		}
		editContext.NotifyValidationStateChanged();
	}

	public async Task HandleInvalidSubmit()
	{
		var isValid = editContext.Validate();
		var test = editContext.GetValidationMessages();
		editContext.NotifyValidationStateChanged();
	}

	public async Task HandleCancel()
	{
		Callback?.Invoke(false);
	}

	private RenderFragment<Currency> CurrencyItemTemplate => item => builder =>
										{
	builder.OpenComponent<MudSelectItem<Currency>>(0); // Specify the type argument here
	builder.AddAttribute(1, "Value", item.Name);
	builder.AddContent(2,
	@<div class="dropdown-item-layout">
		<div class="column1">@item.ISOCode</div>
		<div class="column2">@item.Name</div>
	</div>);
	builder.CloseComponent();
									};

}
