@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums
@using FluentValidation
@inherits PageBase<OrderDetailsModal>
@inject IOrderService orderService

<div class="container">
	<Saphyre_Form Model="Model"
				  OnSubmit="((OrderDescription order) => HandleSubmit(order))"
				  OnClose="HandleCancel">
		<FormContent>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Textbox InputValue="@Model.Description" FieldExpression="@(() => Model.Description)" ValueChanged="((string newVal) => {Model.Description = newVal;})" />
				</div>

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single InputValue="@Model.ShippingType.Name"
										   FieldExpression="(() => Model.ShippingType.Name)"
										   ValueChanged="((string newVal) => SetShippingType(newVal))"
										   Data="shippingOptions"
										   Value_Primary="((DropDownItem item) => item.Name)" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column align-items-center">

				<div class="col-md-6 col-12">
					<Saphyre_Select_Single InputValue="@Model.Currency.Name"
										   FieldExpression="(() => Model.Currency.Name)"
										   ValueChanged="((string newVal) => SetCurrencyType(newVal))"
										   Data="currencyList.Currencies"
										   Value_Primary="((Currency item) => item.Name)" />
				</div>


				<div class="col-md-3 col-12">
					<Saphyre_Numberbox InputValue="@Model.Amount"
									   FieldExpression="@(() => Model.Amount)"
									   ValueChanged="((decimal newVal) => Model.Amount = newVal)" T="decimal" />
				</div>

				<div class="col-md-3 col-12">
					<Saphyre_Select_Single InputValue="@Model.Currency.ISOCode"
										   FieldExpression="(() => Model.Currency.ISOCode)"
										   Data="currencyList.Currencies"
										   IsDisabled="true"
										   IsValidation="false"
										   Value_Primary="((Currency item) => item.ISOCode)" />
				</div>

			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-12 col-12">
					<Saphyre_Select_Grid FieldExpression="(() => Model.ShippingType.Name)" IsGridEditable="true" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					<Saphyre_Numberbox InputValue="@Model.TaxPercentage" FieldExpression="@(() => Model.TaxPercentage)"
									   ValueChanged="((decimal newVal) => Model.TaxPercentage = newVal)" T="decimal" IsPercentage="true" />
				</div>
				<div class="col-md-6 col-12">
					<Saphyre_Date InputValue="Model.Date" />
				</div>
			</div>

		</FormContent>
	</Saphyre_Form>
</div>

@code {
	[Parameter]
	public OrderDescription Model { get; set; }

	[Parameter]
	public Action<bool> Callback { get; set; }

	private EditContext editContext { get; set; }

	private CurrencyList currencyList = new();

	private List<DropDownItem> shippingOptions = new()
	{
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Expedited"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Overnight"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Priority"
		},
		new DropDownItem()
		{
			Id = Guid.NewGuid(),
			Name = "Standard"
		}
	};

	protected override void OnInitialized()
	{
		Model ??= new();
		editContext = new EditContext(Model);
	}

	private async Task HandleSubmit(OrderDescription item = null)
	{
		try
		{
			// fake API call
			//var isSuccess = await orderService.UpdateOrderAsync(Model);
			Callback?.Invoke(true);
		}
		catch (Exception ex)
		{
			Logger.LogError($"Issue submitting order: {ex}");
			Callback?.Invoke(false);
		}
	}

	// Validation refresh
	// TODO: temporary until a workaround is found
	private async Task ReValidate()
	{
		editContext.Validate();
	}

	public async Task HandleInvalidSubmit()
	{
		// TODO: testing, delete
		var isValid = editContext.Validate();
		var test = editContext.GetValidationMessages();
		editContext.NotifyValidationStateChanged();
	}

	public async Task HandleCancel()
	{
		Callback?.Invoke(false);
	}

	public void SetShippingType(string item)
	{
		Model.ShippingType = shippingOptions.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}

	public void SetCurrencyType(string item)
	{
		Model.Currency = currencyList.Currencies.FirstOrDefault(x => x.Name == item);
		StateHasChanged();
	}
}
