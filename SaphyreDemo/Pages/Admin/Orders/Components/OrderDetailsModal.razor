@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums

<div class="container">
	<EditForm EditContext="@editContext"
			  OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />

		<div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-4 col-12">
					<Saphyre_Textbox FieldExpression="@(() => Model.Description)" CSSClass="form-input" />
				</div>

				<div class="col-md-4 col-12">
					<Saphyre_Numberbox FieldExpression="@(() => Model.Amount)" CSSClass="form-input" />
				</div>

				<div class="col-md-4 col-12">
					<Saphyre_Date FieldExpression="@(() => Model.Date)" CSSClass="form-input" />
				</div>
			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-6 col-12">
					@* 					<Saphyre_Select FieldExpression="(() => Model.Currency.Name)"
					TItem="Currency"
					Data="currencyList.Currencies"
					IsGridMode="true"
					IsMultiSelect="true"
					Value_Primary="@((Currency c) => c.Name)"
					Value_Secondary="@((Currency c) => c.ISOCode)" /> *@

					<Saphyre_Select_Custom IsGridEditable="true" />
				</div>

				<div class="col-md-4 col-12">
					<Saphyre_Numberbox InputValue="Model.TaxPercentage" IsPercentage="true" CSSClass="form-input" />
				</div>

			</div>

			<div class="saphyre-form d-flex flex-md-row flex-column">
				<div class="col-md-4 col-12">
					@* <Saphyre_Select FieldExpression="(() => Model.Currency)"
					TItem="Currency"
					Data="currencyList.Currencies"
					IsMultiSelect="true"
					ItemTemplate="@CurrencyItemTemplate"
					ValueSelector="@((Currency c) => c.Name)"
					CSSClass="form-input">

					</Saphyre_Select> *@
				</div>

				@*            <div class="col-md-4 col-12">
				<Saphyre_Select FieldExpression="(() => Model.Products)"
				TItem="Currency"
				Data="currencyList.Currencies"
				ValueSelector="@((Currency c) => c.Name)"
				CSSClass="form-input" />
				</div> *@

			</div>

			<div class="saphyre-form d-flex justify-content-end pt-4 gap-3">
				<button @onclick="HandleCancel" type="button" class="btn btn-secondary modalButton">
					Cancel
				</button>
				<button type="submit" class="btn btn-primary modalButton">
					Submit Order
				</button>
			</div>

		</div>

	</EditForm>
</div>

<style>
	.modalButton {
		width: 8rem;
	}
</style>

@code {
	[Parameter]
	public OrderDescription Model { get; set; }

	[Parameter]
	public Action<bool> Callback { get; set; }

	private EditContext editContext { get; set; }

	private CurrencyList currencyList = new();

	protected override async Task OnInitializedAsync()
	{
		Model ??= new();
		editContext = new EditContext(Model);
	}


	public async Task HandleSubmit()
	{
		Callback?.Invoke(true);
	}


	public async Task HandleCancel()
	{
		Callback?.Invoke(false);
	}

	private RenderFragment<Currency> CurrencyItemTemplate => item => builder =>
			{
	builder.OpenComponent<MudSelectItem<Currency>>(0); // Specify the type argument here
	builder.AddAttribute(1, "Value", item.Name);
	builder.AddContent(2,
	@<div class="dropdown-item-layout">
		<div class="column1">@item.ISOCode</div>
		<div class="column2">@item.Name</div>
	</div>);
	builder.CloseComponent();
		};

}
