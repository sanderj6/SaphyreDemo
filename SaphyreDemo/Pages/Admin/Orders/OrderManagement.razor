@page "/"
@using MudBlazor
@using SaphyreDemo.Pages.Admin.Orders.Components
@using SaphyreDemo.Services.Modal
@using SaphyreDemo.Services.Order
@using SaphyreDemo.Services.Toast
@using SaphyreDemo.Templates.Forms
@using SaphyreDemo.Templates.Tables
@using SaphyreDemo.Templates.Misc
@using Data.Enums
@inherits PageBase<OrderManagement>
@inject ModalService modalService
@inject ToastService toastService
@inject IOrderService orderService
@inject DummyOrderService dummyOrderService

<PageTitle>Order Management</PageTitle>

<div class="container mt-3">

	<div class="form-container-header">
		<div class="d-flex justify-content-between">
			<h2>Order Management</h2>

			<button class="btn btn-primary mb-2" @onclick="(() => AddUpdateOrder(true))">Start New Order</button>
		</div>
	</div>

	<div class="form-container-header mt-md-0 mt-5">
		<div class="row">
			<div class="col-md-3 col-6">
				<Saphyre_InfoBlock Callback="@((string shippingType) => { ShippingFilter = "Priority"; _saphyreTable.RefreshTableData(); } )" Title="Priority Orders" Value="@PendingOrders" Type="BlockType.Pending" />
			</div>
			<div class="col-md-3 col-6">
				<Saphyre_InfoBlock Callback="@((string shippingType) => { ShippingFilter = string.Empty; _saphyreTable.RefreshTableData(); } )" Title="Shipped Today" Value="@(Orders?.Count ?? 0)" Type="BlockType.Shipped" />
			</div>
			<div class="col-md-3 col-6">
				<Saphyre_InfoBlock Title="New Customers" Value="@NewCustomers" Type="BlockType.Customers" IsDisabled="true"/>
			</div>
			<div class="col-md-3 col-6">
				<Saphyre_InfoBlock Title="Fullfillment Rate" Value="@FullfillmentRate" Type="BlockType.Fullfillment" IsDisabled="true" />
			</div>
		</div>
	</div>

	<div class="form-container saphyreTable">
		<Saphyre_Table @ref="_saphyreTable"
		               TItem="OrderDescription"
		               DataService="@GetFilteredData"
					   RowClickCallback="((OrderDescription item) => {SelectedOrder = item; AddUpdateOrder();})">

			<HeaderTemplate>
				<MudTh>Description</MudTh>
				<MudTh>Amount</MudTh>
				<MudTh>TaxPercentage</MudTh>
				<MudTh>Products</MudTh>
				<MudTh>Shipping</MudTh>
				<MudTh>Date</MudTh>
			</HeaderTemplate>

			<RowTemplate>
			    <MudTd DataLabel="Description" Style="width:15%;">@context.Description</MudTd>
			    <MudTd DataLabel="Amount" Style="width:15%; text-align:right;">@string.Format("{0:C}", context.Amount)</MudTd>
			    <MudTd DataLabel="TaxPercentage" Style="width:15%; text-align:right;">@string.Format("{0:P}", context.TaxPercentage / 100.0M)</MudTd>
			    <MudTd DataLabel="Products" Class="ellipsis"  Style="width:30%;" title="@(string.Join(", ", context.Products.Select(p => p.Name)))">@(string.Join(", ", context.Products.Select(p => p.Name)))</MudTd>
			    <MudTd DataLabel="Shipping" Class="ellipsis"  Style="width:10%;">@context.ShippingType.Name</MudTd>
			    <MudTd DataLabel="Date" Style="width:15%;">@context.Date.ToString("MM/dd/yyyy")</MudTd>
			</RowTemplate>

			</Saphyre_Table>
		</div>

	</div>

	@code {

	// Dummy list of users
	public List<OrderDescription> Orders { get; set; }
	
	public OrderDescription SelectedOrder { get; set; } = new();
	public bool IsNewOrder { get; set; }

	private int PendingOrders { get; set; } = default;
	private int NewCustomers { get; set; } = default;
	private int FullfillmentRate { get; set; } = default;

	Saphyre_Table<OrderDescription> _saphyreTable;
	private string ShippingFilter { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		Random _random = new Random();
		NewCustomers =  _random.Next(50, 200);
		FullfillmentRate =  _random.Next(85, 99);
	}
	
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Orders = dummyOrderService.GetAllOrders();
			PendingOrders = Orders.Where(x => x.ShippingType.Name == "Priority").Count();
			StateHasChanged();
		}
	}

	private async Task<IEnumerable<OrderDescription>> GetFilteredData(string searchString)
	{
		var orders = await dummyOrderService.GetFilteredOrders(searchString);

		if (!string.IsNullOrEmpty(ShippingFilter))
		{
			orders = orders.Where(x => x.ShippingType.Name == ShippingFilter);
		}
		
		return orders;
	}

	private async Task AddUpdateOrder(bool IsNewOrder = false)
	{
		var OrderText = IsNewOrder ? "Create Order" : "Manage Order"; // Set Title text
		SelectedOrder = IsNewOrder ? new() : SelectedOrder;

		OrderDescription model = new()
		{
			Id = IsNewOrder ? Guid.NewGuid() : SelectedOrder.Id,
			Description = IsNewOrder ? string.Empty : SelectedOrder.Description,
			ShippingType = IsNewOrder ? new DropDownItem() : SelectedOrder.ShippingType,
			Amount = IsNewOrder ? default : SelectedOrder.Amount,
			Currency = IsNewOrder ? new Currency() : SelectedOrder.Currency,
			ProductType = IsNewOrder ? new DropDownItem() : SelectedOrder.ProductType,
			Products = IsNewOrder ? Enumerable.Empty<DropDownItem>() : SelectedOrder.Products,
			TaxPercentage = IsNewOrder ? 0 : SelectedOrder.TaxPercentage,
			Date = IsNewOrder ? DateTime.Today : SelectedOrder.Date,
		};
		
		// Clear SelectedOrder when submitting new
		modalService.Show<OrderDescription, OrderDescription, bool>(OrderText, "modal-md", typeof(OrderDetailsModal), model, (updatedModal,isSuccess) =>
		{
			if (isSuccess)
			{
				if (IsNewOrder)
				{
					Orders ??= new List<OrderDescription>();

					Orders.Add(updatedModal);
				}
				else
				{
					var index = Orders.FindIndex(x => x.Id == updatedModal.Id);
					if (index != -1)
					{
						Orders[index] = updatedModal;
						StateHasChanged();
					}
				}
				
				toastService.ShowMessage("Order has been successfully submitted!");
			}
			modalService.Close();
		});
	}

}